import sqlite3
from tkinter import *
from tkinter import ttk, messagebox
import ttkbootstrap
import speech_recognition as sr
import threading
from tkcalendar import DateEntry
import atexit
from datetime import datetime

class NotesApp:
    def __init__(self):
        # Tietokantayhteys
        self.connection, self.cursor = self.connect_to_database()

        # GUI
        self.style = ttkbootstrap.Style(theme='superhero')
        self.root = self.style.master
        self.root.title("Muistiinpanot")
        self.root.geometry("600x600")
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        # Käyttöliittymäelementit
        self.create_widgets()
        self.show_notes()

        # Puheentunnistus
        self.listening = False

        # Lopetusvarmistus
        atexit.register(self.close_database)

    def connect_to_database(self):
        connection = sqlite3.connect("notes.db")
        cursor = connection.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS notes (id INTEGER PRIMARY KEY, note TEXT, alarm_time TEXT)")
        connection.commit()
        return connection, cursor

    def close_database(self):
        self.connection.close()

    def add_note(self):
        note_text = self.note_entry.get()
        if note_text:
            self.cursor.execute("INSERT INTO notes (note, alarm_time) VALUES (?, ?)", (note_text, None))
            self.connection.commit()
            self.note_entry.delete(0, END)
            self.show_notes()

            # Hälytyksen asetus
            if messagebox.askyesno("Hälytys", "Haluatko asettaa hälytyksen?"):
                alarm_window = Toplevel(self.root)
                alarm_window.title("Aseta hälytys")
                alarm_window.geometry("300x200")
                ttk.Label(alarm_window, text="Valitse päivämäärä ja kellonaika").pack(pady=10)
                alarm_date = DateEntry(alarm_window, width=20)
                alarm_date.pack(pady=10)
                alarm_time = ttk.Entry(alarm_window, width=10)
                alarm_time.insert(0, "HH:MM")
                alarm_time.pack(pady=10)

                def save_alarm():
                    try:
                        alarm_datetime = f"{alarm_date.get()} {alarm_time.get()}"
                        datetime.strptime(alarm_datetime, "%m/%d/%y %H:%M")
                        self.cursor.execute("UPDATE notes SET alarm_time = ? WHERE note = ?", (alarm_datetime, note_text))
                        self.connection.commit()
                        alarm_window.destroy()
                    except ValueError:
                        messagebox.showerror("Virhe", "Virheellinen päivämäärä tai kellonaika")

                ttk.Button(alarm_window, text="Tallenna", command=save_alarm).pack(pady=10)
        else:
            messagebox.showinfo("Varoitus", "Muistiinpano ei voi olla tyhjä")

    def delete_note(self):
        selected_note = self.listbox.get(ANCHOR)
        if selected_note:
            self.cursor.execute("DELETE FROM notes WHERE note = ?", (selected_note,))
            self.connection.commit()
            self.show_notes()
        else:
            messagebox.showinfo("Varoitus", "Valitse poistettava muistiinpano")

    def show_notes(self):
        self.cursor.execute("SELECT * FROM notes")
        rows = self.cursor.fetchall()
        self.listbox.delete(0, END)
        for row in rows:
            display_text = f"{row[1]}{' (hälytys: ' + row[2] + ')' if row[2] else ''}"
            self.listbox.insert(END, display_text)

    def start_listening(self, event):
        self.listening = True
        threading.Thread(target=self.listen_note).start()

    def stop_listening(self, event):
        self.listening = False

    def listen_note(self):
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            while self.listening:
                try:
                    self.status_label.config(text="Kuuntelen... Puhu!")
                    audio = recognizer.listen(source, timeout=2, phrase_time_limit=5)
                    note_text = recognizer.recognize_google(audio, language="fi-FI")
                    self.note_entry.insert(END, note_text)
                    self.status_label.config(text="Valmis")
                except sr.UnknownValueError:
                    self.status_label.config(text="Ei tunnistettu, yritä uudelleen")
                except sr.RequestError as e:
                    self.status_label.config(text=f"Virhe: {e}")

    def on_close(self):
        self.close_database()
        self.root.destroy()

    def create_widgets(self):
        # Ylätunniste
        ttk.Label(self.root, text="Muistiinpanot", font=("Arial", 18)).pack(pady=10)

        # Muistiinpanokenttä
        self.note_entry = ttk.Entry(self.root, font=("Arial", 15))
        self.note_entry.pack(pady=10)

        # Painikkeet
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)

        ttk.Button(button_frame, text="Lisää", command=self.add_note).pack(side=LEFT, padx=5)
        ttk.Button(button_frame, text="Poista", command=self.delete_note).pack(side=LEFT, padx=5)

        listen_button = ttk.Button(button_frame, text="Kuuntele")
        listen_button.bind("<Button-1>", self.start_listening)
        listen_button.bind("<ButtonRelease-1>", self.stop_listening)
        listen_button.pack(side=LEFT, padx=5)

        # Muistiinpanolista
        self.listbox = Listbox(self.root, font=("Arial", 12), width=50, height=15)
        self.listbox.pack(pady=10)

        # Tila
        self.status_label = ttk.Label(self.root, text="Valmis", font=("Arial", 10), anchor="center")
        self.status_label.pack(pady=5)

    def run(self):
        self.root.mainloop()

# Käynnistys
if __name__ == "__main__":
    app = NotesApp()
    app.run()
